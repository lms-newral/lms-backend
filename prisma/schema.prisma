generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Configuration model for this client instance
model ClientConfig {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  logoUrl      String?
  appName      String?
  primaryColor String?
  service      Service  @default(SUSPENDED)
  subdomain    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum Service {
  ACTIVE
  SUSPENDED
}

// User Model (Simplified for single client)
model User {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  profileImage String?
  email        String  @unique
  phoneNumber  String? @unique
  isVerified   Boolean @default(false)
  password     String
  username     String  @unique
  name         String
  role         Role    @default(STUDENT)
  deviceLimit  Int     @default(2)

  // Relations
  devices Device[]
  otp     Otp?
  otpId   String?  @db.ObjectId

  // Course Relations
  createdCourses  Course[]           @relation("CourseCreator") // Courses created by teacher
  enrolledCourses CourseEnrollment[] // Courses student is enrolled in
  createdClasses  Class[]            @relation("ClassCreator") // Classes created by teacher

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([role])
  @@index([isVerified])
  @@index([name])
}

// Device Model (Unchanged)
model Device {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @db.ObjectId
  osName       String
  browserName  String
  deviceIp     String
  refreshToken String?
  createdAt    DateTime @default(now())

  @@index([userId])
}

// OTP Model (Unchanged)
model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @unique @db.ObjectId
  email     String
  otp       String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Course Model (Removed client relation)
model Course {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  thumbnail   String? // Course thumbnail image
  isActive    Boolean @default(true)
  price       Float? // Optional pricing
  category    String? // Course category

  // Teacher who created the course
  creator   User   @relation("CourseCreator", fields: [creatorId], references: [id])
  creatorId String @db.ObjectId

  // Relations
  enrollments CourseEnrollment[]
  classes     Class[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([creatorId])
  @@index([isActive])
  @@index([title])
  @@index([category])
}

// Course Enrollment (Unchanged logic, simplified relations)
model CourseEnrollment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Student enrolled in course
  student   User   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String @db.ObjectId

  // Course the student is enrolled in
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String @db.ObjectId

  enrolledAt     DateTime         @default(now())
  completedAt    DateTime? // When the course was completed
  status         EnrollmentStatus @default(ACTIVE)
  progress       Float            @default(0) // Progress percentage (0-100)
  lastAccessedAt DateTime? // Track when student last accessed the course

  @@unique([studentId, courseId]) // A student can only be enrolled once in a course
  @@index([studentId])
  @@index([courseId])
  @@index([status])
  @@index([enrolledAt])
}

model Class {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  videoLink   String?
  zoomLink    String?
  notes       String[]
  attachments String[] //pdf and other attachment links 
  assignments String[]
  quizzes     String[]

  // Course this class belongs to
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String @db.ObjectId

  // Teacher who created this class
  creator   User   @relation("ClassCreator", fields: [creatorId], references: [id])
  creatorId String @db.ObjectId

  // Scheduling and tracking
  scheduledAt     DateTime? // When the class is scheduled (for live sessions)
  attendanceCount Int       @default(0) // Track attendance for live sessions

  // Content flags
  isLive     Boolean @default(false)
  isRecorded Boolean @default(false)
  isActive   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([scheduledAt])
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
  SUPER_ADMIN
}
